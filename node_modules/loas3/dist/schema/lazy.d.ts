declare const _default: {
    description: string;
    type: string;
    properties: {
        openapi: {
            type: string;
            pattern: string;
        };
        info: {
            $ref: string;
        };
        externalDocs: {
            $ref: string;
        };
        servers: {
            type: string;
            items: {
                $ref: string;
            };
        };
        security: {
            type: string;
            items: {
                $ref: string;
            };
        };
        tags: {
            type: string;
            items: {
                $ref: string;
            };
            uniqueItems: boolean;
        };
        paths: {
            $ref: string;
        };
        components: {
            $ref: string;
        };
    };
    patternProperties: {
        "^x-": {};
    };
    additionalProperties: boolean;
    definitions: {
        $Reference: {
            type: string;
            required: string[];
            properties: {
                $ref: {
                    type: string;
                    format: string;
                };
            };
        };
        $Info: {
            type: string;
            properties: {
                title: {
                    type: string;
                };
                description: {
                    type: string;
                };
                termsOfService: {
                    type: string;
                    format: string;
                };
                contact: {
                    $ref: string;
                };
                license: {
                    $ref: string;
                };
                version: {
                    type: string;
                };
            };
            patternProperties: {
                "^x-": {};
            };
            additionalProperties: boolean;
        };
        $Contact: {
            type: string;
            properties: {
                name: {
                    type: string;
                };
                url: {
                    type: string;
                    format: string;
                };
                email: {
                    type: string;
                    format: string;
                };
            };
            patternProperties: {
                "^x-": {};
            };
            additionalProperties: boolean;
        };
        $License: {
            type: string;
            required: string[];
            properties: {
                name: {
                    type: string;
                };
                url: {
                    type: string;
                    format: string;
                };
            };
            patternProperties: {
                "^x-": {};
            };
            additionalProperties: boolean;
        };
        $Server: {
            type: string;
            required: string[];
            properties: {
                url: {
                    type: string;
                };
                description: {
                    type: string;
                };
                variables: {
                    type: string;
                    additionalProperties: {
                        $ref: string;
                    };
                };
            };
            patternProperties: {
                "^x-": {};
            };
            additionalProperties: boolean;
        };
        $ServerVariable: {
            type: string;
            required: string[];
            properties: {
                enum: {
                    type: string;
                    items: {
                        type: string;
                    };
                };
                default: {
                    type: string;
                };
                description: {
                    type: string;
                };
            };
            patternProperties: {
                "^x-": {};
            };
            additionalProperties: boolean;
        };
        $Components: {
            type: string;
            properties: {
                schemas: {
                    type: string;
                    patternProperties: {
                        "^[a-zA-Z0-9\\.\\-_]+$": {
                            switch: ({
                                if: {
                                    required: string[];
                                };
                                then: {
                                    $ref: string;
                                };
                            } | {
                                then: {
                                    $ref: string;
                                };
                                if?: undefined;
                            })[];
                        };
                    };
                };
                responses: {
                    type: string;
                    patternProperties: {
                        "^[a-zA-Z0-9\\.\\-_]+$": {
                            switch: ({
                                if: {
                                    required: string[];
                                };
                                then: {
                                    $ref: string;
                                };
                            } | {
                                then: {
                                    $ref: string;
                                };
                                if?: undefined;
                            })[];
                        };
                    };
                };
                parameters: {
                    type: string;
                    patternProperties: {
                        "^[a-zA-Z0-9\\.\\-_]+$": {
                            switch: ({
                                if: {
                                    required: string[];
                                };
                                then: {
                                    $ref: string;
                                };
                            } | {
                                then: {
                                    $ref: string;
                                };
                                if?: undefined;
                            })[];
                        };
                    };
                };
                examples: {
                    type: string;
                    patternProperties: {
                        "^[a-zA-Z0-9\\.\\-_]+$": {
                            switch: ({
                                if: {
                                    required: string[];
                                };
                                then: {
                                    $ref: string;
                                };
                            } | {
                                then: {
                                    $ref: string;
                                };
                                if?: undefined;
                            })[];
                        };
                    };
                };
                requestBodies: {
                    type: string;
                    patternProperties: {
                        "^[a-zA-Z0-9\\.\\-_]+$": {
                            switch: ({
                                if: {
                                    required: string[];
                                };
                                then: {
                                    $ref: string;
                                };
                            } | {
                                then: {
                                    $ref: string;
                                };
                                if?: undefined;
                            })[];
                        };
                    };
                };
                headers: {
                    type: string;
                    patternProperties: {
                        "^[a-zA-Z0-9\\.\\-_]+$": {
                            switch: ({
                                if: {
                                    required: string[];
                                };
                                then: {
                                    $ref: string;
                                };
                            } | {
                                then: {
                                    $ref: string;
                                };
                                if?: undefined;
                            })[];
                        };
                    };
                };
                securitySchemes: {
                    type: string;
                    patternProperties: {
                        "^[a-zA-Z0-9\\.\\-_]+$": {
                            switch: ({
                                if: {
                                    required: string[];
                                };
                                then: {
                                    $ref: string;
                                };
                            } | {
                                then: {
                                    $ref: string;
                                };
                                if?: undefined;
                            })[];
                        };
                    };
                };
                links: {
                    type: string;
                    patternProperties: {
                        "^[a-zA-Z0-9\\.\\-_]+$": {
                            switch: ({
                                if: {
                                    required: string[];
                                };
                                then: {
                                    $ref: string;
                                };
                            } | {
                                then: {
                                    $ref: string;
                                };
                                if?: undefined;
                            })[];
                        };
                    };
                };
                callbacks: {
                    type: string;
                    patternProperties: {
                        "^[a-zA-Z0-9\\.\\-_]+$": {
                            switch: ({
                                if: {
                                    required: string[];
                                };
                                then: {
                                    $ref: string;
                                };
                            } | {
                                then: {
                                    $ref: string;
                                };
                                if?: undefined;
                            })[];
                        };
                    };
                };
            };
            patternProperties: {
                "^x-": {};
            };
            additionalProperties: boolean;
        };
        $Discriminator: {
            type: string;
            required: string[];
            properties: {
                propertyName: {
                    type: string;
                };
                mapping: {
                    type: string;
                    additionalProperties: {
                        type: string;
                    };
                };
            };
        };
        $XML: {
            type: string;
            properties: {
                name: {
                    type: string;
                };
                namespace: {
                    type: string;
                    format: string;
                };
                prefix: {
                    type: string;
                };
                attribute: {
                    type: string;
                    default: boolean;
                };
                wrapped: {
                    type: string;
                    default: boolean;
                };
            };
            patternProperties: {
                "^x-": {};
            };
            additionalProperties: boolean;
        };
        $Response: {
            anyOf: {
                $ref: string;
            }[];
        };
        $$Response: {
            type: string;
            properties: {
                description: {
                    type: string;
                };
                headers: {
                    type: string;
                    additionalProperties: {
                        switch: ({
                            if: {
                                required: string[];
                            };
                            then: {
                                $ref: string;
                            };
                        } | {
                            then: {
                                $ref: string;
                            };
                            if?: undefined;
                        })[];
                    };
                };
                content: {
                    type: string;
                    additionalProperties: {
                        $ref: string;
                    };
                };
                links: {
                    type: string;
                    additionalProperties: {
                        switch: ({
                            if: {
                                required: string[];
                            };
                            then: {
                                $ref: string;
                            };
                        } | {
                            then: {
                                $ref: string;
                            };
                            if?: undefined;
                        })[];
                    };
                };
            };
            patternProperties: {
                "^x-": {};
            };
            additionalProperties: boolean;
        };
        $Schema: {
            anyOf: {
                $ref: string;
            }[];
        };
        $$Schema: {
            type: string;
            properties: {
                title: {
                    type: string;
                };
                multipleOf: {
                    type: string;
                    minimum: number;
                    exclusiveMinimum: number;
                };
                maximum: {
                    type: string;
                };
                exclusiveMaximum: {
                    type: string;
                    default: boolean;
                };
                minimum: {
                    type: string;
                };
                exclusiveMinimum: {
                    type: string;
                    default: boolean;
                };
                maxLength: {
                    type: string;
                    minimum: number;
                };
                minLength: {
                    type: string;
                    minimum: number;
                    default: number;
                };
                pattern: {
                    type: string;
                    format: string;
                };
                maxItems: {
                    type: string;
                    minimum: number;
                };
                minItems: {
                    type: string;
                    minimum: number;
                    default: number;
                };
                uniqueItems: {
                    type: string;
                    default: boolean;
                };
                maxProperties: {
                    type: string;
                    minimum: number;
                };
                minProperties: {
                    type: string;
                    minimum: number;
                    default: number;
                };
                required: {
                    type: string;
                    items: {
                        type: string;
                    };
                    minItems: number;
                    uniqueItems: boolean;
                    errorMessage: {
                        type: string;
                    };
                };
                enum: {
                    type: string;
                    items: {};
                    minItems: number;
                    uniqueItems: boolean;
                };
                type: {
                    type: string;
                    enum: string[];
                };
                not: {
                    switch: ({
                        if: {
                            required: string[];
                        };
                        then: {
                            $ref: string;
                        };
                    } | {
                        then: {
                            $ref: string;
                        };
                        if?: undefined;
                    })[];
                };
                allOf: {
                    type: string;
                    items: {
                        switch: ({
                            if: {
                                required: string[];
                            };
                            then: {
                                $ref: string;
                            };
                        } | {
                            then: {
                                $ref: string;
                            };
                            if?: undefined;
                        })[];
                    };
                };
                oneOf: {
                    type: string;
                    items: {
                        switch: ({
                            if: {
                                required: string[];
                            };
                            then: {
                                $ref: string;
                            };
                        } | {
                            then: {
                                $ref: string;
                            };
                            if?: undefined;
                        })[];
                    };
                };
                anyOf: {
                    type: string;
                    items: {
                        switch: ({
                            if: {
                                required: string[];
                            };
                            then: {
                                $ref: string;
                            };
                        } | {
                            then: {
                                $ref: string;
                            };
                            if?: undefined;
                        })[];
                    };
                };
                items: {
                    anyOf: ({
                        $ref: string;
                        type?: undefined;
                        items?: undefined;
                    } | {
                        type: string;
                        items: {
                            anyOf: {
                                $ref: string;
                            }[];
                        };
                        $ref?: undefined;
                    })[];
                };
                properties: {
                    type: string;
                    additionalProperties: {
                        switch: ({
                            if: {
                                required: string[];
                            };
                            then: {
                                $ref: string;
                            };
                        } | {
                            then: {
                                $ref: string;
                            };
                            if?: undefined;
                        })[];
                    };
                };
                additionalProperties: {
                    default: boolean;
                    switch: ({
                        if: {
                            type: string;
                            required: string[];
                        };
                        then: {
                            $ref: string;
                            type?: undefined;
                            errorMessage?: undefined;
                        };
                    } | {
                        if: {
                            type: string;
                            required?: undefined;
                        };
                        then: {
                            $ref: string;
                            type?: undefined;
                            errorMessage?: undefined;
                        };
                    } | {
                        then: {
                            type: string;
                            errorMessage: string;
                            $ref?: undefined;
                        };
                        if?: undefined;
                    })[];
                };
                description: {
                    type: string;
                };
                format: {
                    type: string;
                };
                default: {};
                nullable: {
                    type: string;
                    default: boolean;
                };
                discriminator: {
                    $ref: string;
                };
                readOnly: {
                    type: string;
                    default: boolean;
                };
                writeOnly: {
                    type: string;
                    default: boolean;
                };
                example: {};
                externalDocs: {
                    $ref: string;
                };
                deprecated: {
                    type: string;
                    default: boolean;
                };
                xml: {
                    $ref: string;
                };
            };
            patternProperties: {
                "^x-": {};
            };
            additionalProperties: boolean;
        };
        $SimpleObjectSchema: {};
        $SimpleIntegerSchema: {
            type: string;
        };
        $SimpleNumberSchema: {
            type: string;
        };
        $SimpleStringSchema: {
            type: string;
        };
        $SimpleBooleanSchema: {
            type: string;
        };
        $SimpleArraySchema: {
            type: string;
        };
        $MediaType: {
            anyOf: {
                $ref: string;
            }[];
        };
        $$MediaType: {
            type: string;
            properties: {
                schema: {
                    switch: ({
                        if: {
                            required: string[];
                        };
                        then: {
                            $ref: string;
                        };
                    } | {
                        then: {
                            $ref: string;
                        };
                        if?: undefined;
                    })[];
                };
                example: {};
                examples: {
                    type: string;
                    additionalProperties: {
                        switch: ({
                            if: {
                                required: string[];
                            };
                            then: {
                                $ref: string;
                            };
                        } | {
                            then: {
                                $ref: string;
                            };
                            if?: undefined;
                        })[];
                    };
                };
                encoding: {
                    type: string;
                    additionalProperties: {
                        $ref: string;
                    };
                };
            };
            patternProperties: {
                "^x-": {};
            };
            additionalProperties: boolean;
            allOf: {
                $ref: string;
            }[];
        };
        $Example: {
            type: string;
            properties: {
                summary: {
                    type: string;
                };
                description: {
                    type: string;
                };
                value: {};
                externalValue: {
                    type: string;
                    format: string;
                };
            };
            patternProperties: {
                "^x-": {};
            };
            additionalProperties: boolean;
        };
        $Header: {
            type: string;
            properties: {
                description: {
                    type: string;
                };
                required: {
                    type: string;
                    default: boolean;
                };
                deprecated: {
                    type: string;
                    default: boolean;
                };
                allowEmptyValue: {
                    type: string;
                    default: boolean;
                };
                style: {
                    type: string;
                    enum: string[];
                    default: string;
                };
                explode: {
                    type: string;
                };
                allowReserved: {
                    type: string;
                    default: boolean;
                };
                schema: {
                    switch: ({
                        if: {
                            required: string[];
                        };
                        then: {
                            $ref: string;
                        };
                    } | {
                        then: {
                            $ref: string;
                        };
                        if?: undefined;
                    })[];
                };
                content: {
                    type: string;
                    additionalProperties: {
                        $ref: string;
                    };
                    minProperties: number;
                    maxProperties: number;
                };
                example: {};
                examples: {
                    type: string;
                    additionalProperties: {
                        switch: ({
                            if: {
                                required: string[];
                            };
                            then: {
                                $ref: string;
                            };
                        } | {
                            then: {
                                $ref: string;
                            };
                            if?: undefined;
                        })[];
                    };
                };
            };
            patternProperties: {
                "^x-": {};
            };
            additionalProperties: boolean;
            allOf: {
                $ref: string;
            }[];
        };
        $Paths: {
            type: string;
            patternProperties: {
                "^\\/": {
                    $ref: string;
                };
                "^x-": {};
            };
            additionalProperties: boolean;
            errorMessage: {
                additionalProperties: string;
            };
        };
        $LazyLazyParams: {
            type: string;
            additionalProperties: {
                $ref: string;
            };
        };
        $LazyParams: {
            type: string;
            properties: {
                query: {
                    $ref: string;
                };
                header: {
                    $ref: string;
                };
                path: {
                    $ref: string;
                };
                cookie: {
                    $ref: string;
                };
            };
        };
        $PathItem: {
            switch: ({
                if: {
                    required: string[];
                };
                then: {
                    $ref: string;
                };
            } | {
                then: {
                    $ref: string;
                };
                if?: undefined;
            })[];
            anyOf: {
                $ref: string;
            }[];
        };
        $$PathItem: {
            type: string;
            properties: {
                $ref: {
                    type: string;
                };
                summary: {
                    type: string;
                };
                description: {
                    type: string;
                };
                servers: {
                    type: string;
                    items: {
                        $ref: string;
                    };
                };
                parameters: {
                    anyOf: ({
                        $ref: string;
                        type?: undefined;
                        items?: undefined;
                        uniqueItems?: undefined;
                    } | {
                        type: string;
                        items: {
                            switch: ({
                                if: {
                                    required: string[];
                                };
                                then: {
                                    $ref: string;
                                };
                            } | {
                                then: {
                                    $ref: string;
                                };
                                if?: undefined;
                            })[];
                        };
                        uniqueItems: boolean;
                        $ref?: undefined;
                    })[];
                };
            };
            patternProperties: {
                "^(get|put|post|delete|options|head|patch|trace)$": {
                    $ref: string;
                };
                "^x-": {};
            };
            additionalProperties: boolean;
        };
        $Operation: {
            anyOf: {
                $ref: string;
            }[];
        };
        $$Operation: {
            type: string;
            required: string[];
            properties: {
                tags: {
                    type: string;
                    items: {
                        type: string;
                    };
                };
                summary: {
                    type: string;
                };
                description: {
                    type: string;
                };
                externalDocs: {
                    $ref: string;
                };
                operationId: {
                    type: string;
                };
                parameters: {
                    anyOf: ({
                        $ref: string;
                        type?: undefined;
                        items?: undefined;
                        uniqueItems?: undefined;
                    } | {
                        type: string;
                        items: {
                            switch: ({
                                if: {
                                    required: string[];
                                };
                                then: {
                                    $ref: string;
                                };
                            } | {
                                then: {
                                    $ref: string;
                                };
                                if?: undefined;
                            })[];
                        };
                        uniqueItems: boolean;
                        $ref?: undefined;
                    })[];
                };
                requestBody: {
                    switch: ({
                        if: {
                            required: string[];
                        };
                        then: {
                            $ref: string;
                        };
                    } | {
                        then: {
                            $ref: string;
                        };
                        if?: undefined;
                    })[];
                };
                responses: {
                    $ref: string;
                };
                callbacks: {
                    type: string;
                    additionalProperties: {
                        switch: ({
                            if: {
                                required: string[];
                            };
                            then: {
                                $ref: string;
                            };
                        } | {
                            then: {
                                $ref: string;
                            };
                            if?: undefined;
                        })[];
                    };
                };
                deprecated: {
                    type: string;
                    default: boolean;
                };
                security: {
                    type: string;
                    items: {
                        $ref: string;
                    };
                };
                servers: {
                    type: string;
                    items: {
                        $ref: string;
                    };
                };
            };
            patternProperties: {
                "^x-": {};
            };
            additionalProperties: boolean;
        };
        $Responses: {
            anyOf: {
                $ref: string;
            }[];
        };
        $$Responses: {
            type: string;
            properties: {
                default: {
                    switch: ({
                        if: {
                            required: string[];
                        };
                        then: {
                            $ref: string;
                        };
                    } | {
                        then: {
                            $ref: string;
                        };
                        if?: undefined;
                    })[];
                };
            };
            patternProperties: {
                "^[1-5](?:\\d{2}|XX)$": {
                    switch: ({
                        if: {
                            required: string[];
                        };
                        then: {
                            $ref: string;
                        };
                    } | {
                        then: {
                            $ref: string;
                        };
                        if?: undefined;
                    })[];
                };
                "^x-": {};
            };
            minProperties: number;
            additionalProperties: boolean;
            not: {
                type: string;
                minProperties: number;
                additionalProperties: boolean;
                patternProperties: {
                    "^x-": {};
                };
            };
            errorMessage: {
                minProperties: string;
                not: string;
                additionalProperties: string;
            };
        };
        $SecurityRequirement: {
            type: string;
            additionalProperties: {
                type: string;
                items: {
                    type: string;
                };
            };
        };
        $Tag: {
            type: string;
            required: string[];
            properties: {
                name: {
                    type: string;
                };
                description: {
                    type: string;
                };
                externalDocs: {
                    $ref: string;
                };
            };
            patternProperties: {
                "^x-": {};
            };
            additionalProperties: boolean;
        };
        $ExternalDocumentation: {
            type: string;
            required: string[];
            properties: {
                description: {
                    type: string;
                };
                url: {
                    type: string;
                    format: string;
                };
            };
            patternProperties: {
                "^x-": {};
            };
            additionalProperties: boolean;
        };
        $ExampleXORExamples: {
            description: string;
            errorMessage: string;
            not: {
                required: string[];
            };
        };
        $SchemaXORContent: {
            description: string;
            switch: ({
                if: {
                    required: string[];
                };
                then: boolean;
            } | {
                if: {
                    required: string[];
                };
                then: {
                    description: string;
                    errorMessage: string;
                    allOf: {
                        not: {
                            required: string[];
                        };
                    }[];
                    required?: undefined;
                };
            } | {
                then: {
                    required: string[];
                    description?: undefined;
                    errorMessage?: undefined;
                    allOf?: undefined;
                };
                if?: undefined;
            })[];
            errorMessage: string;
        };
        $Parameter: {
            type: string;
            properties: {
                name: {
                    type: string;
                };
                in: {
                    type: string;
                };
                description: {
                    type: string;
                };
                required: {
                    type: string;
                    default: boolean;
                };
                deprecated: {
                    type: string;
                    default: boolean;
                };
                allowEmptyValue: {
                    type: string;
                    default: boolean;
                };
                style: {
                    type: string;
                };
                explode: {
                    type: string;
                };
                allowReserved: {
                    type: string;
                    default: boolean;
                };
                schema: {
                    switch: ({
                        if: {
                            required: string[];
                        };
                        then: {
                            $ref: string;
                        };
                    } | {
                        then: {
                            $ref: string;
                        };
                        if?: undefined;
                    })[];
                };
                content: {
                    type: string;
                    additionalProperties: {
                        $ref: string;
                    };
                    minProperties: number;
                    maxProperties: number;
                };
                example: {};
                examples: {
                    type: string;
                    additionalProperties: {
                        switch: ({
                            if: {
                                required: string[];
                            };
                            then: {
                                $ref: string;
                            };
                        } | {
                            then: {
                                $ref: string;
                            };
                            if?: undefined;
                        })[];
                    };
                };
            };
            patternProperties: {
                "^x-": {};
            };
            additionalProperties: boolean;
            required: string[];
            allOf: {
                $ref: string;
            }[];
        };
        $ParameterLocation: {
            description: string;
            switch: ({
                if: {
                    required: string[];
                    properties: {
                        in: {
                            enum: string[];
                        };
                    };
                };
                then: {
                    description: string;
                    required: string[];
                    properties: {
                        style: {
                            enum: string[];
                            default: string;
                        };
                        required: {
                            enum: boolean[];
                        };
                        in?: undefined;
                    };
                };
            } | {
                if: {
                    required: string[];
                    properties: {
                        in: {
                            enum: string[];
                        };
                    };
                };
                then: {
                    description: string;
                    properties: {
                        style: {
                            enum: string[];
                            default: string;
                        };
                        required?: undefined;
                        in?: undefined;
                    };
                    required?: undefined;
                };
            } | {
                then: {
                    required: string[];
                    properties: {
                        in: {
                            enum: string[];
                        };
                        style?: undefined;
                        required?: undefined;
                    };
                    description?: undefined;
                };
                if?: undefined;
            })[];
        };
        $RequestBody: {
            anyOf: {
                $ref: string;
            }[];
        };
        $$RequestBody: {
            type: string;
            required: string[];
            properties: {
                description: {
                    type: string;
                };
                content: {
                    type: string;
                    additionalProperties: {
                        $ref: string;
                    };
                };
                required: {
                    type: string;
                    default: boolean;
                };
            };
            patternProperties: {
                "^x-": {};
            };
            additionalProperties: boolean;
        };
        $SecurityScheme: {
            type: string;
            switch: ({
                if: {
                    required: string[];
                    properties: {
                        type: {
                            enum: string[];
                        };
                    };
                };
                then: {
                    $ref: string;
                    required?: undefined;
                    properties?: undefined;
                };
            } | {
                then: {
                    required: string[];
                    properties: {
                        type: {
                            type: string;
                            enum: string[];
                        };
                    };
                    $ref?: undefined;
                };
                if?: undefined;
            })[];
        };
        $APIKeySecurityScheme: {
            type: string;
            required: string[];
            properties: {
                type: {
                    type: string;
                    enum: string[];
                };
                name: {
                    type: string;
                };
                in: {
                    type: string;
                    enum: string[];
                };
                description: {
                    type: string;
                };
            };
            patternProperties: {
                "^x-": {};
            };
            additionalProperties: boolean;
        };
        $HTTPSecurityScheme: {
            type: string;
            required: string[];
            properties: {
                scheme: {
                    type: string;
                };
                bearerFormat: {
                    type: string;
                };
                description: {
                    type: string;
                };
                type: {
                    type: string;
                    enum: string[];
                };
            };
            patternProperties: {
                "^x-": {};
            };
            switch: {
                if: {
                    not: {
                        required: string[];
                        properties: {
                            scheme: {
                                enum: string[];
                            };
                        };
                    };
                };
                then: {
                    properties: {
                        bearerFormat: {
                            enum: null[];
                        };
                    };
                    errorMessage: string;
                };
            }[];
            additionalProperties: boolean;
        };
        $OAuth2SecurityScheme: {
            type: string;
            required: string[];
            properties: {
                type: {
                    type: string;
                    enum: string[];
                };
                flows: {
                    $ref: string;
                };
                description: {
                    type: string;
                };
            };
            patternProperties: {
                "^x-": {};
            };
            additionalProperties: boolean;
        };
        $OpenIdConnectSecurityScheme: {
            type: string;
            required: string[];
            properties: {
                type: {
                    type: string;
                    enum: string[];
                };
                openIdConnectUrl: {
                    type: string;
                    format: string;
                };
                description: {
                    type: string;
                };
            };
            patternProperties: {
                "^x-": {};
            };
            additionalProperties: boolean;
        };
        $OAuthFlows: {
            type: string;
            properties: {
                implicit: {
                    $ref: string;
                };
                password: {
                    $ref: string;
                };
                clientCredentials: {
                    $ref: string;
                };
                authorizationCode: {
                    $ref: string;
                };
            };
            patternProperties: {
                "^x-": {};
            };
            additionalProperties: boolean;
        };
        $ImplicitOAuthFlow: {
            type: string;
            required: string[];
            properties: {
                authorizationUrl: {
                    type: string;
                    format: string;
                };
                refreshUrl: {
                    type: string;
                    format: string;
                };
                scopes: {
                    type: string;
                    additionalProperties: {
                        type: string;
                    };
                };
            };
            patternProperties: {
                "^x-": {};
            };
            additionalProperties: boolean;
        };
        $PasswordOAuthFlow: {
            type: string;
            required: string[];
            properties: {
                tokenUrl: {
                    type: string;
                    format: string;
                };
                refreshUrl: {
                    type: string;
                    format: string;
                };
                scopes: {
                    type: string;
                    additionalProperties: {
                        type: string;
                    };
                };
            };
            patternProperties: {
                "^x-": {};
            };
            additionalProperties: boolean;
        };
        $ClientCredentialsFlow: {
            type: string;
            required: string[];
            properties: {
                tokenUrl: {
                    type: string;
                    format: string;
                };
                refreshUrl: {
                    type: string;
                    format: string;
                };
                scopes: {
                    type: string;
                    additionalProperties: {
                        type: string;
                    };
                };
            };
            patternProperties: {
                "^x-": {};
            };
            additionalProperties: boolean;
        };
        $AuthorizationCodeOAuthFlow: {
            type: string;
            required: string[];
            properties: {
                authorizationUrl: {
                    type: string;
                    format: string;
                };
                tokenUrl: {
                    type: string;
                    format: string;
                };
                refreshUrl: {
                    type: string;
                    format: string;
                };
                scopes: {
                    type: string;
                    additionalProperties: {
                        type: string;
                    };
                };
            };
            patternProperties: {
                "^x-": {};
            };
            additionalProperties: boolean;
        };
        $Link: {
            type: string;
            properties: {
                operationId: {
                    type: string;
                };
                operationRef: {
                    type: string;
                    format: string;
                };
                parameters: {
                    type: string;
                    additionalProperties: {};
                };
                requestBody: {};
                description: {
                    type: string;
                };
                server: {
                    $ref: string;
                };
            };
            patternProperties: {
                "^x-": {};
            };
            additionalProperties: boolean;
            not: {
                description: string;
                required: string[];
            };
        };
        $Callback: {
            type: string;
            additionalProperties: {
                $ref: string;
            };
            patternProperties: {
                "^x-": {};
            };
        };
        $Encoding: {
            type: string;
            properties: {
                contentType: {
                    type: string;
                };
                headers: {
                    type: string;
                    additionalProperties: {
                        $ref: string;
                    };
                };
                style: {
                    type: string;
                    enum: string[];
                };
                explode: {
                    type: string;
                };
                allowReserved: {
                    type: string;
                    default: boolean;
                };
            };
            additionalProperties: boolean;
        };
    };
};
export default _default;
//# sourceMappingURL=lazy.d.ts.map