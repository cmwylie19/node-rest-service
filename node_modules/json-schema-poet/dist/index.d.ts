import { JSSTInteger, JSSTNumber, JSSTRegex, JSSTBoolean, JSSTObject, JSONSchemaObject, JSSTNull, JSSTConst, JSSTAllOf, JSSTNot, JSSTOneOf, JSSTAnyOf, JSSTStringEnum, JSSTIntegerEnum, JSSTNumberEnum, JSSTAnything, JSONValue, JSSTTuple, JSSTList, JSSTReference, JSSTTopLevel, JSSTSimpleString } from "json-schema-strictly-typed";
export interface IntPropsWithMinimum {
    minimum: number;
    exclusiveMinimum?: boolean;
    multipleOf?: number;
}
export interface IntPropsWithMaximum {
    maximum: number;
    exclusiveMaximum?: boolean;
    multipleOf?: number;
}
export interface IntPropsWithBounds {
    minimum: number;
    maximum: number;
    exclusiveMinimum?: boolean;
    exclusiveMaximum?: boolean;
    multipleOf?: number;
}
export interface IntPropsWithExclusiveMinimum {
    exclusiveMinimum: number;
    multipleOf?: number;
}
export interface IntPropsWithExclusiveMinimumAndMaximum {
    maximum: number;
    exclusiveMinimum: number;
    exclusiveMaximum?: boolean;
    multipleOf?: number;
}
export interface IntPropsWithExclusiveMaximum {
    exclusiveMaximum: number;
    multipleOf?: number;
}
export interface IntPropsWithExclusiveMaximumAndMinimum {
    minimum: number;
    exclusiveMinimum?: boolean;
    exclusiveMaximum: number;
    multipleOf?: number;
}
export interface IntPropsWithExclusiveBounds {
    minimum: number;
    maximum: number;
    exclusiveMinimum: number;
    exclusiveMaximum: number;
    multipleOf?: number;
}
export declare type IntProps = IntPropsWithMinimum | IntPropsWithMaximum | IntPropsWithBounds | IntPropsWithExclusiveMinimum | IntPropsWithExclusiveMinimumAndMaximum | IntPropsWithExclusiveMaximum | IntPropsWithExclusiveMaximumAndMinimum | IntPropsWithExclusiveBounds;
export interface NumberProps {
    minimum: number;
    maximum: number;
}
export interface ObjectProps<T, U extends object> {
    properties: Record<string, JSSTAnything<T, U>>;
    additionalProperties: boolean | JSSTAnything<T, U>;
    patternProperties: Record<string, JSSTAnything<T, U>>;
    required: string[];
}
export declare const nul_: <U extends object>(u: U) => () => JSSTNull<U>;
export declare const nul: () => {
    type: "null";
};
export declare const cnst_: <U extends object>(u: U) => (c: JSONValue) => JSSTConst<U>;
export declare const cnst: (c: JSONValue) => {
    const: JSONValue;
};
export declare const integer_: <U extends object>(u: U) => (props?: IntPropsWithMinimum | IntPropsWithMaximum | IntPropsWithBounds | IntPropsWithExclusiveMinimum | IntPropsWithExclusiveMinimumAndMaximum | IntPropsWithExclusiveMaximum | IntPropsWithExclusiveMaximumAndMinimum | IntPropsWithExclusiveBounds | undefined) => JSSTInteger<U>;
export declare const integer: (props?: IntPropsWithMinimum | IntPropsWithMaximum | IntPropsWithBounds | IntPropsWithExclusiveMinimum | IntPropsWithExclusiveMinimumAndMaximum | IntPropsWithExclusiveMaximum | IntPropsWithExclusiveMaximumAndMinimum | IntPropsWithExclusiveBounds | undefined) => JSSTInteger<{}>;
export declare const number_: <U extends object>(u: U) => (props?: Partial<NumberProps> | undefined) => JSSTNumber<U>;
export declare const number: (props?: Partial<NumberProps> | undefined) => JSSTNumber<{}>;
export declare const string_: <U extends object>(u: U) => (faker?: "address.zipCode" | "address.city" | "address.cityPrefix" | "address.citySuffix" | "address.streetName" | "address.streetAddress" | "address.streetSuffix" | "address.streetPrefix" | "address.secondaryAddress" | "address.county" | "address.country" | "address.countryCode" | "address.state" | "address.stateAbbr" | "address.latitude" | "address.longitude" | "commerce.color" | "commerce.department" | "commerce.productName" | "commerce.price" | "commerce.productAdjective" | "commerce.productMaterial" | "commerce.product" | "company.suffixes" | "company.companyName" | "company.companySuffix" | "company.catchPhrase" | "company.bs" | "company.catchPhraseAdjective" | "company.catchPhraseDescriptor" | "company.catchPhraseNoun" | "company.bsAdjective" | "company.bsBuzz" | "company.bsNoun" | "database.column" | "database.type" | "database.collation" | "database.engine" | "date.past" | "date.future" | "date.between" | "date.recent" | "date.soon" | "date.month" | "date.weekday" | "finance.account" | "finance.accountName" | "finance.mask" | "finance.amount" | "finance.transactionType" | "finance.currencyCode" | "finance.currencyName" | "finance.currencySymbol" | "finance.bitcoinAddress" | "finance.ethereumAddress" | "finance.iban" | "finance.bic" | "hacker.abbreviation" | "hacker.adjective" | "hacker.noun" | "hacker.verb" | "hacker.ingverb" | "hacker.phrase" | "helpers.randomize" | "helpers.slugify" | "helpers.replaceSymbolWithNumber" | "helpers.replaceSymbols" | "helpers.shuffle" | "helpers.mustache" | "helpers.createCard" | "helpers.contextualCard" | "helpers.userCard" | "helpers.createTransaction" | "image.image" | "image.avatar" | "image.imageUrl" | "image.abstract" | "image.animals" | "image.business" | "image.cats" | "image.city" | "image.food" | "image.nightlife" | "image.fashion" | "image.people" | "image.nature" | "image.sports" | "image.technics" | "image.transport" | "image.dataUri" | "internet.avatar" | "internet.email" | "internet.exampleEmail" | "internet.userName" | "internet.protocol" | "internet.url" | "internet.domainName" | "internet.domainSuffix" | "internet.domainWord" | "internet.ip" | "internet.ipv6" | "internet.userAgent" | "internet.color" | "internet.mac" | "internet.password" | "lorem.word" | "lorem.words" | "lorem.sentence" | "lorem.slug" | "lorem.sentences" | "lorem.paragraph" | "lorem.paragraphs" | "lorem.text" | "lorem.lines" | "name.firstName" | "name.lastName" | "name.findName" | "name.jobTitle" | "name.prefix" | "name.suffix" | "name.title" | "name.jobDescriptor" | "name.jobArea" | "name.jobType" | "phone.phoneNumber" | "phone.phoneNumberFormat" | "phone.phoneFormats" | "random.number" | "random.float" | "random.arrayElement" | "random.objectElement" | "random.uuid" | "random.boolean" | "random.word" | "random.words" | "random.image" | "random.locale" | "random.alphaNumeric" | "random.hexaDecimal" | "system.fileName" | "system.commonFileName" | "system.mimeType" | "system.commonFileType" | "system.commonFileExt" | "system.fileType" | "system.fileExt" | "system.directoryPath" | "system.filePath" | "system.semver" | undefined) => JSSTSimpleString<U>;
export declare const string: (faker?: "address.zipCode" | "address.city" | "address.cityPrefix" | "address.citySuffix" | "address.streetName" | "address.streetAddress" | "address.streetSuffix" | "address.streetPrefix" | "address.secondaryAddress" | "address.county" | "address.country" | "address.countryCode" | "address.state" | "address.stateAbbr" | "address.latitude" | "address.longitude" | "commerce.color" | "commerce.department" | "commerce.productName" | "commerce.price" | "commerce.productAdjective" | "commerce.productMaterial" | "commerce.product" | "company.suffixes" | "company.companyName" | "company.companySuffix" | "company.catchPhrase" | "company.bs" | "company.catchPhraseAdjective" | "company.catchPhraseDescriptor" | "company.catchPhraseNoun" | "company.bsAdjective" | "company.bsBuzz" | "company.bsNoun" | "database.column" | "database.type" | "database.collation" | "database.engine" | "date.past" | "date.future" | "date.between" | "date.recent" | "date.soon" | "date.month" | "date.weekday" | "finance.account" | "finance.accountName" | "finance.mask" | "finance.amount" | "finance.transactionType" | "finance.currencyCode" | "finance.currencyName" | "finance.currencySymbol" | "finance.bitcoinAddress" | "finance.ethereumAddress" | "finance.iban" | "finance.bic" | "hacker.abbreviation" | "hacker.adjective" | "hacker.noun" | "hacker.verb" | "hacker.ingverb" | "hacker.phrase" | "helpers.randomize" | "helpers.slugify" | "helpers.replaceSymbolWithNumber" | "helpers.replaceSymbols" | "helpers.shuffle" | "helpers.mustache" | "helpers.createCard" | "helpers.contextualCard" | "helpers.userCard" | "helpers.createTransaction" | "image.image" | "image.avatar" | "image.imageUrl" | "image.abstract" | "image.animals" | "image.business" | "image.cats" | "image.city" | "image.food" | "image.nightlife" | "image.fashion" | "image.people" | "image.nature" | "image.sports" | "image.technics" | "image.transport" | "image.dataUri" | "internet.avatar" | "internet.email" | "internet.exampleEmail" | "internet.userName" | "internet.protocol" | "internet.url" | "internet.domainName" | "internet.domainSuffix" | "internet.domainWord" | "internet.ip" | "internet.ipv6" | "internet.userAgent" | "internet.color" | "internet.mac" | "internet.password" | "lorem.word" | "lorem.words" | "lorem.sentence" | "lorem.slug" | "lorem.sentences" | "lorem.paragraph" | "lorem.paragraphs" | "lorem.text" | "lorem.lines" | "name.firstName" | "name.lastName" | "name.findName" | "name.jobTitle" | "name.prefix" | "name.suffix" | "name.title" | "name.jobDescriptor" | "name.jobArea" | "name.jobType" | "phone.phoneNumber" | "phone.phoneNumberFormat" | "phone.phoneFormats" | "random.number" | "random.float" | "random.arrayElement" | "random.objectElement" | "random.uuid" | "random.boolean" | "random.word" | "random.words" | "random.image" | "random.locale" | "random.alphaNumeric" | "random.hexaDecimal" | "system.fileName" | "system.commonFileName" | "system.mimeType" | "system.commonFileType" | "system.commonFileExt" | "system.fileType" | "system.fileExt" | "system.directoryPath" | "system.filePath" | "system.semver" | undefined) => JSSTSimpleString<{}>;
export declare const stringEnum_: <U extends object>(u: U) => (enu: string[]) => JSSTStringEnum<U>;
export declare const stringEnum: (enu: string[]) => JSSTStringEnum<{}>;
export declare const numberEnum_: <U extends object>(u: U) => (enu: number[]) => JSSTNumberEnum<U>;
export declare const numberEnum: (enu: number[]) => JSSTNumberEnum<{}>;
export declare const integerEnum_: <U extends object>(u: U) => (enu: number[]) => JSSTIntegerEnum<U>;
export declare const integerEnum: (enu: number[]) => JSSTIntegerEnum<{}>;
export declare const $ref_: <U extends object>(u: U) => ($ref: string) => JSSTReference<U>;
export declare const $ref: ($ref: string) => {
    $ref: string;
};
export declare const regex_: <U extends object>(u: U) => (pattern: string) => JSSTRegex<U>;
export declare const regex: (pattern: string) => JSSTRegex<{}>;
export declare const boolean_: <U extends object>(u: U) => () => JSSTBoolean<U>;
export declare const boolean: () => {
    type: "boolean";
};
export declare const array_: <T, U extends object>(u: U) => (items: JSSTAnything<T, U>) => JSSTList<T, U>;
export declare const array: <T>(items: JSSTAnything<T, {}>) => JSSTList<unknown, {}>;
export declare const tuple_: <T, U extends object>(u: U) => (items: JSSTAnything<T, U>[]) => JSSTTuple<T, U>;
export declare const tuple: <T>(items: JSSTAnything<T, {}>[]) => JSSTTuple<unknown, {}>;
export declare const allOf_: <T, U extends object>(u: U) => (allOf: JSSTAnything<T, U>[]) => JSSTAllOf<T, U>;
export declare const allOf: <T>(allOf: JSSTAnything<T, {}>[]) => {
    allOf: unknown[];
};
export declare const anyOf_: <T, U extends object>(u: U) => (anyOf: JSSTAnything<T, U>[]) => JSSTAnyOf<T, U>;
export declare const anyOf: <T>(anyOf: JSSTAnything<T, {}>[]) => {
    anyOf: unknown[];
};
export declare const oneOf_: <T, U extends object>(u: U) => (oneOf: JSSTAnything<T, U>[]) => JSSTOneOf<T, U>;
export declare const oneOf: <T>(oneOf: JSSTAnything<T, {}>[]) => {
    oneOf: unknown[];
};
export declare const not_: <T, U extends object>(u: U) => (not: JSSTAnything<T, U>) => JSSTNot<T, U>;
export declare const not: <T>(not: JSSTAnything<T, {}>) => {
    not: unknown;
};
export declare const dictionary_: <T, U extends object>(u: U) => (vals: JSSTAnything<T, U>) => JSSTObject<T, U>;
export declare const dictionary: <T>(vals: JSSTAnything<T, {}>) => {
    type: "object";
    required?: string[] | undefined;
    dependencies?: Record<string, string[]> | undefined;
    additionalProperties?: unknown;
    patternProperties?: Record<string, unknown> | undefined;
    properties?: Record<string, unknown> | undefined;
};
export declare const type_: <T, U extends object>(u: U) => (req: Record<string, JSSTAnything<T, U>>, opt: Record<string, JSSTAnything<T, U>>) => JSSTObject<T, U>;
export declare const type: <T>(req: Record<string, JSSTAnything<T, {}>>, opt: Record<string, JSSTAnything<T, {}>>) => {
    type: "object";
    required?: string[] | undefined;
    dependencies?: Record<string, string[]> | undefined;
    additionalProperties?: unknown;
    patternProperties?: Record<string, unknown> | undefined;
    properties?: Record<string, unknown> | undefined;
};
export declare const object_: <T, U extends object>(u: U) => (props?: Partial<ObjectProps<T, U>> | undefined) => JSSTObject<T, U>;
export declare const object: <T>(props?: Partial<ObjectProps<T, {}>> | undefined) => {
    type: "object";
    required?: string[] | undefined;
    dependencies?: Record<string, string[]> | undefined;
    additionalProperties?: unknown;
    patternProperties?: Record<string, unknown> | undefined;
    properties?: Record<string, unknown> | undefined;
};
export declare const top: <T, U extends object, M extends JSSTAnything<T, U>>(anything: M, props?: JSSTTopLevel<T, U> | undefined) => JSONSchemaObject<T, U>;
export declare const extend: <T, U extends object>(what: JSSTAnything<T, U>, key: string, v: JSONValue) => JSONSchemaObject<T, U>;
export declare const extendT: <T, U extends object>(u: U) => {
    nul: () => JSSTNull<U>;
    cnst: (c: JSONValue) => JSSTConst<U>;
    integer: (props?: IntPropsWithMinimum | IntPropsWithMaximum | IntPropsWithBounds | IntPropsWithExclusiveMinimum | IntPropsWithExclusiveMinimumAndMaximum | IntPropsWithExclusiveMaximum | IntPropsWithExclusiveMaximumAndMinimum | IntPropsWithExclusiveBounds | undefined) => JSSTInteger<U>;
    number: (props?: Partial<NumberProps> | undefined) => JSSTNumber<U>;
    string: (faker?: "address.zipCode" | "address.city" | "address.cityPrefix" | "address.citySuffix" | "address.streetName" | "address.streetAddress" | "address.streetSuffix" | "address.streetPrefix" | "address.secondaryAddress" | "address.county" | "address.country" | "address.countryCode" | "address.state" | "address.stateAbbr" | "address.latitude" | "address.longitude" | "commerce.color" | "commerce.department" | "commerce.productName" | "commerce.price" | "commerce.productAdjective" | "commerce.productMaterial" | "commerce.product" | "company.suffixes" | "company.companyName" | "company.companySuffix" | "company.catchPhrase" | "company.bs" | "company.catchPhraseAdjective" | "company.catchPhraseDescriptor" | "company.catchPhraseNoun" | "company.bsAdjective" | "company.bsBuzz" | "company.bsNoun" | "database.column" | "database.type" | "database.collation" | "database.engine" | "date.past" | "date.future" | "date.between" | "date.recent" | "date.soon" | "date.month" | "date.weekday" | "finance.account" | "finance.accountName" | "finance.mask" | "finance.amount" | "finance.transactionType" | "finance.currencyCode" | "finance.currencyName" | "finance.currencySymbol" | "finance.bitcoinAddress" | "finance.ethereumAddress" | "finance.iban" | "finance.bic" | "hacker.abbreviation" | "hacker.adjective" | "hacker.noun" | "hacker.verb" | "hacker.ingverb" | "hacker.phrase" | "helpers.randomize" | "helpers.slugify" | "helpers.replaceSymbolWithNumber" | "helpers.replaceSymbols" | "helpers.shuffle" | "helpers.mustache" | "helpers.createCard" | "helpers.contextualCard" | "helpers.userCard" | "helpers.createTransaction" | "image.image" | "image.avatar" | "image.imageUrl" | "image.abstract" | "image.animals" | "image.business" | "image.cats" | "image.city" | "image.food" | "image.nightlife" | "image.fashion" | "image.people" | "image.nature" | "image.sports" | "image.technics" | "image.transport" | "image.dataUri" | "internet.avatar" | "internet.email" | "internet.exampleEmail" | "internet.userName" | "internet.protocol" | "internet.url" | "internet.domainName" | "internet.domainSuffix" | "internet.domainWord" | "internet.ip" | "internet.ipv6" | "internet.userAgent" | "internet.color" | "internet.mac" | "internet.password" | "lorem.word" | "lorem.words" | "lorem.sentence" | "lorem.slug" | "lorem.sentences" | "lorem.paragraph" | "lorem.paragraphs" | "lorem.text" | "lorem.lines" | "name.firstName" | "name.lastName" | "name.findName" | "name.jobTitle" | "name.prefix" | "name.suffix" | "name.title" | "name.jobDescriptor" | "name.jobArea" | "name.jobType" | "phone.phoneNumber" | "phone.phoneNumberFormat" | "phone.phoneFormats" | "random.number" | "random.float" | "random.arrayElement" | "random.objectElement" | "random.uuid" | "random.boolean" | "random.word" | "random.words" | "random.image" | "random.locale" | "random.alphaNumeric" | "random.hexaDecimal" | "system.fileName" | "system.commonFileName" | "system.mimeType" | "system.commonFileType" | "system.commonFileExt" | "system.fileType" | "system.fileExt" | "system.directoryPath" | "system.filePath" | "system.semver" | undefined) => JSSTSimpleString<U>;
    stringEnum: (enu: string[]) => JSSTStringEnum<U>;
    numberEnum: (enu: number[]) => JSSTNumberEnum<U>;
    integerEnum: (enu: number[]) => JSSTIntegerEnum<U>;
    regex: (pattern: string) => JSSTRegex<U>;
    boolean: () => JSSTBoolean<U>;
    $ref: ($ref: string) => JSSTReference<U>;
    array: (items: JSSTAnything<T, U>) => JSSTList<T, U>;
    tuple: (items: JSSTAnything<T, U>[]) => JSSTTuple<T, U>;
    allOf: (allOf: JSSTAnything<T, U>[]) => JSSTAllOf<T, U>;
    anyOf: (anyOf: JSSTAnything<T, U>[]) => JSSTAnyOf<T, U>;
    oneOf: (oneOf: JSSTAnything<T, U>[]) => JSSTOneOf<T, U>;
    not: (not: JSSTAnything<T, U>) => JSSTNot<T, U>;
    dictionary: (vals: JSSTAnything<T, U>) => JSSTObject<T, U>;
    type: (req: Record<string, JSSTAnything<T, U>>, opt: Record<string, JSSTAnything<T, U>>) => JSSTObject<T, U>;
    object: (props?: Partial<ObjectProps<T, U>> | undefined) => JSSTObject<T, U>;
    top: <T_1, U_1 extends object, M extends JSSTAnything<T_1, U_1>>(anything: M, props?: JSSTTopLevel<T_1, U_1> | undefined) => JSONSchemaObject<T_1, U_1>;
    extend: <T_2, U_2 extends object>(what: JSSTAnything<T_2, U_2>, key: string, v: JSONValue) => JSONSchemaObject<T_2, U_2>;
};
//# sourceMappingURL=index.d.ts.map