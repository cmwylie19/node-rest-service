"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.invariantCodec = exports.URI = exports.imap = exports.lazy = exports.sum = exports.intersection = exports.tuple = exports.array = exports.record = exports.partial = exports.type = exports.nullable = exports.refinement = exports.withExpected = exports.UnknownRecord = exports.UnknownArray = exports.boolean = exports.number = exports.string = exports.literal = exports.fromDecoder = exports.make = void 0;
var D = require("./Decoder");
var E = require("./Encoder");
var function_1 = require("fp-ts/lib/function");
// -------------------------------------------------------------------------------------
// constructors
// -------------------------------------------------------------------------------------
/**
 * @since 2.2.3
 */
function make(decoder, encoder) {
    return {
        decode: decoder.decode,
        encode: encoder.encode
    };
}
exports.make = make;
/**
 * @since 2.2.3
 */
function fromDecoder(decoder) {
    return {
        decode: decoder.decode,
        encode: function_1.identity
    };
}
exports.fromDecoder = fromDecoder;
/**
 * @since 2.2.3
 */
function literal() {
    var values = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        values[_i] = arguments[_i];
    }
    return fromDecoder(D.literal.apply(D, values));
}
exports.literal = literal;
// -------------------------------------------------------------------------------------
// primitives
// -------------------------------------------------------------------------------------
/**
 * @since 2.2.3
 */
exports.string = fromDecoder(D.string);
/**
 * @since 2.2.3
 */
exports.number = fromDecoder(D.number);
/**
 * @since 2.2.3
 */
exports.boolean = fromDecoder(D.boolean);
/**
 * @since 2.2.3
 */
exports.UnknownArray = fromDecoder(D.UnknownArray);
/**
 * @since 2.2.3
 */
exports.UnknownRecord = fromDecoder(D.UnknownRecord);
// -------------------------------------------------------------------------------------
// combinators
// -------------------------------------------------------------------------------------
/**
 * @since 2.2.3
 */
function withExpected(codec, expected) {
    return make(D.withExpected(codec, expected), codec);
}
exports.withExpected = withExpected;
/**
 * @since 2.2.3
 */
function refinement(from, refinement, expected) {
    return make(D.refinement(from, refinement, expected), from);
}
exports.refinement = refinement;
/**
 * @since 2.2.3
 */
function nullable(or) {
    return make(D.nullable(or), E.nullable(or));
}
exports.nullable = nullable;
/**
 * @since 2.2.3
 */
function type(properties) {
    var decoder = D.type(properties);
    return make(decoder, E.type(properties));
}
exports.type = type;
/**
 * @since 2.2.3
 */
function partial(properties) {
    return make(D.partial(properties), E.partial(properties));
}
exports.partial = partial;
/**
 * @since 2.2.3
 */
function record(codomain) {
    return make(D.record(codomain), E.record(codomain));
}
exports.record = record;
/**
 * @since 2.2.3
 */
function array(items) {
    return make(D.array(items), E.array(items));
}
exports.array = array;
/**
 * @since 2.2.3
 */
function tuple() {
    var components = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        components[_i] = arguments[_i];
    }
    var decoder = D.tuple.apply(D, components);
    var encoder = E.tuple.apply(E, components);
    return make(decoder, encoder);
}
exports.tuple = tuple;
/**
 * @since 2.2.3
 */
function intersection(left, right) {
    return make(D.intersection(left, right), E.intersection(left, right));
}
exports.intersection = intersection;
/**
 * @since 2.2.3
 */
function sum(tag) {
    var sumD = D.sum(tag);
    var sumE = E.sum(tag);
    return function (members) { return make(sumD(members), sumE(members)); };
}
exports.sum = sum;
/**
 * @since 2.2.3
 */
function lazy(id, f) {
    return make(D.lazy(id, f), E.lazy(f));
}
exports.lazy = lazy;
// -------------------------------------------------------------------------------------
// pipeables
// -------------------------------------------------------------------------------------
/**
 * @since 2.2.3
 */
exports.imap = function (f, g) { return function (fa) {
    return imap_(fa, f, g);
}; };
var imap_ = function (fa, f, g) {
    return make(D.functorDecoder.map(fa, f), E.contravariantEncoder.contramap(fa, g));
};
// -------------------------------------------------------------------------------------
// instances
// -------------------------------------------------------------------------------------
/**
 * @since 2.2.3
 */
exports.URI = 'io-ts/Codec';
/**
 * @since 2.2.3
 */
exports.invariantCodec = {
    URI: exports.URI,
    imap: imap_
};
