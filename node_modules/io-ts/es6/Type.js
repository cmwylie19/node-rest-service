/**
 * @since 2.2.3
 */
import * as t from './index';
// -------------------------------------------------------------------------------------
// constructors
// -------------------------------------------------------------------------------------
/**
 * @since 2.2.3
 */
export function literal() {
    var values = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        values[_i] = arguments[_i];
    }
    return t.union(values.map(function (v) { return t.literal(v); }));
}
// -------------------------------------------------------------------------------------
// primitives
// -------------------------------------------------------------------------------------
/**
 * @since 2.2.3
 */
export var string = t.string;
/**
 * @since 2.2.3
 */
export var number = t.number;
/**
 * @since 2.2.3
 */
export var boolean = t.boolean;
/**
 * @since 2.2.3
 */
export var UnknownArray = t.UnknownArray;
/**
 * @since 2.2.3
 */
export var UnknownRecord = t.UnknownRecord;
// -------------------------------------------------------------------------------------
// combinators
// -------------------------------------------------------------------------------------
/**
 * @since 2.2.3
 */
export function refinement(from, refinement, expected) {
    // tslint:disable-next-line: deprecation
    return t.refinement(from, refinement, expected);
}
/**
 * @since 2.2.3
 */
export function nullable(or) {
    return t.union([t.null, or]);
}
/**
 * @since 2.2.3
 */
export function type(properties) {
    return t.type(properties);
}
/**
 * @since 2.2.3
 */
export function partial(properties) {
    return t.partial(properties);
}
/**
 * @since 2.2.3
 */
export function record(codomain) {
    return t.record(t.string, codomain);
}
/**
 * @since 2.2.3
 */
export function array(items) {
    return t.array(items);
}
/**
 * @since 2.2.3
 */
export function tuple() {
    var components = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        components[_i] = arguments[_i];
    }
    return t.tuple(components);
}
/**
 * @since 2.2.3
 */
export function intersection(left, right) {
    return t.intersection([left, right]);
}
/**
 * @since 2.2.3
 */
export function lazy(id, f) {
    return t.recursion(id, f);
}
/**
 * @since 2.2.3
 */
export function sum(_tag) {
    return function (members) { return t.union(Object.values(members)); };
}
/**
 * @since 2.2.3
 */
export function union() {
    var members = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        members[_i] = arguments[_i];
    }
    return t.union(members);
}
// -------------------------------------------------------------------------------------
// instances
// -------------------------------------------------------------------------------------
/**
 * @since 2.2.3
 */
export var URI = 'io-ts/Type';
/**
 * @since 2.2.3
 */
export var schemableType = {
    URI: URI,
    literal: literal,
    string: string,
    number: number,
    boolean: boolean,
    nullable: nullable,
    type: type,
    partial: partial,
    record: record,
    array: array,
    tuple: tuple,
    intersection: intersection,
    sum: sum,
    lazy: lazy,
    UnknownArray: UnknownArray,
    UnknownRecord: UnknownRecord,
    union: union,
    refinement: refinement
};
