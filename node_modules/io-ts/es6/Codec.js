import * as D from './Decoder';
import * as E from './Encoder';
import { identity } from 'fp-ts/es6/function';
// -------------------------------------------------------------------------------------
// constructors
// -------------------------------------------------------------------------------------
/**
 * @since 2.2.3
 */
export function make(decoder, encoder) {
    return {
        decode: decoder.decode,
        encode: encoder.encode
    };
}
/**
 * @since 2.2.3
 */
export function fromDecoder(decoder) {
    return {
        decode: decoder.decode,
        encode: identity
    };
}
/**
 * @since 2.2.3
 */
export function literal() {
    var values = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        values[_i] = arguments[_i];
    }
    return fromDecoder(D.literal.apply(D, values));
}
// -------------------------------------------------------------------------------------
// primitives
// -------------------------------------------------------------------------------------
/**
 * @since 2.2.3
 */
export var string = fromDecoder(D.string);
/**
 * @since 2.2.3
 */
export var number = fromDecoder(D.number);
/**
 * @since 2.2.3
 */
export var boolean = fromDecoder(D.boolean);
/**
 * @since 2.2.3
 */
export var UnknownArray = fromDecoder(D.UnknownArray);
/**
 * @since 2.2.3
 */
export var UnknownRecord = fromDecoder(D.UnknownRecord);
// -------------------------------------------------------------------------------------
// combinators
// -------------------------------------------------------------------------------------
/**
 * @since 2.2.3
 */
export function withExpected(codec, expected) {
    return make(D.withExpected(codec, expected), codec);
}
/**
 * @since 2.2.3
 */
export function refinement(from, refinement, expected) {
    return make(D.refinement(from, refinement, expected), from);
}
/**
 * @since 2.2.3
 */
export function nullable(or) {
    return make(D.nullable(or), E.nullable(or));
}
/**
 * @since 2.2.3
 */
export function type(properties) {
    var decoder = D.type(properties);
    return make(decoder, E.type(properties));
}
/**
 * @since 2.2.3
 */
export function partial(properties) {
    return make(D.partial(properties), E.partial(properties));
}
/**
 * @since 2.2.3
 */
export function record(codomain) {
    return make(D.record(codomain), E.record(codomain));
}
/**
 * @since 2.2.3
 */
export function array(items) {
    return make(D.array(items), E.array(items));
}
/**
 * @since 2.2.3
 */
export function tuple() {
    var components = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        components[_i] = arguments[_i];
    }
    var decoder = D.tuple.apply(D, components);
    var encoder = E.tuple.apply(E, components);
    return make(decoder, encoder);
}
/**
 * @since 2.2.3
 */
export function intersection(left, right) {
    return make(D.intersection(left, right), E.intersection(left, right));
}
/**
 * @since 2.2.3
 */
export function sum(tag) {
    var sumD = D.sum(tag);
    var sumE = E.sum(tag);
    return function (members) { return make(sumD(members), sumE(members)); };
}
/**
 * @since 2.2.3
 */
export function lazy(id, f) {
    return make(D.lazy(id, f), E.lazy(f));
}
// -------------------------------------------------------------------------------------
// pipeables
// -------------------------------------------------------------------------------------
/**
 * @since 2.2.3
 */
export var imap = function (f, g) { return function (fa) {
    return imap_(fa, f, g);
}; };
var imap_ = function (fa, f, g) {
    return make(D.functorDecoder.map(fa, f), E.contravariantEncoder.contramap(fa, g));
};
// -------------------------------------------------------------------------------------
// instances
// -------------------------------------------------------------------------------------
/**
 * @since 2.2.3
 */
export var URI = 'io-ts/Codec';
/**
 * @since 2.2.3
 */
export var invariantCodec = {
    URI: URI,
    imap: imap_
};
