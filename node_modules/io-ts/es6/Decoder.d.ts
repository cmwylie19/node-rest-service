/**
 * @since 2.2.0
 */
import { Either } from 'fp-ts/es6/Either';
import { NonEmptyArray } from 'fp-ts/es6/NonEmptyArray';
import { Forest, Tree } from 'fp-ts/es6/Tree';
import * as G from './Guard';
import { Literal, Schemable1, WithRefinement1, WithUnion1, WithUnknownContainers1 } from './Schemable';
import { Functor1 } from 'fp-ts/es6/Functor';
import { Alt1 } from 'fp-ts/es6/Alt';
/**
 * @since 2.2.2
 */
export interface DecodeError extends NonEmptyArray<Tree<string>> {
}
/**
 * @since 2.2.0
 */
export interface Decoder<A> {
    readonly decode: (u: unknown) => Either<DecodeError, A>;
}
/**
 * @since 2.2.0
 */
export declare type TypeOf<D> = D extends Decoder<infer A> ? A : never;
/**
 * @since 2.2.0
 */
export declare function tree<A>(value: A, forest?: Forest<A>): Tree<A>;
/**
 * @since 2.2.0
 */
export declare function success<A>(a: A): Either<DecodeError, A>;
/**
 * @since 2.2.0
 */
export declare function failure<A = never>(message: string): Either<DecodeError, A>;
/**
 * @since 2.2.2
 */
export declare function isNotEmpty<A>(as: ReadonlyArray<A>): as is NonEmptyArray<A>;
/**
 * @since 2.2.3
 */
export declare function of<A>(a: A): Decoder<A>;
/**
 * @since 2.2.0
 */
export declare function fromGuard<A>(guard: G.Guard<A>, expected: string): Decoder<A>;
/**
 * @since 2.2.0
 */
export declare function literal<A extends ReadonlyArray<Literal>>(...values: A): Decoder<A[number]>;
/**
 * @since 2.2.0
 */
export declare const never: Decoder<never>;
/**
 * @since 2.2.0
 */
export declare const string: Decoder<string>;
/**
 * @since 2.2.0
 */
export declare const number: Decoder<number>;
/**
 * @since 2.2.0
 */
export declare const boolean: Decoder<boolean>;
/**
 * @since 2.2.0
 */
export declare const UnknownArray: Decoder<Array<unknown>>;
/**
 * @since 2.2.0
 */
export declare const UnknownRecord: Decoder<Record<string, unknown>>;
/**
 * @since 2.2.0
 */
export declare function withExpected<A>(decoder: Decoder<A>, expected: (actual: unknown, e: DecodeError) => DecodeError): Decoder<A>;
/**
 * @since 2.2.0
 */
export declare function refinement<A, B extends A>(from: Decoder<A>, refinement: (a: A) => a is B, expected: string): Decoder<B>;
/**
 * @since 2.2.0
 */
export declare function parse<A, B>(from: Decoder<A>, parser: (a: A) => Either<string, B>): Decoder<B>;
/**
 * @since 2.2.0
 */
export declare function nullable<A>(or: Decoder<A>): Decoder<null | A>;
/**
 * @since 2.2.0
 */
export declare function type<A>(properties: {
    [K in keyof A]: Decoder<A[K]>;
}): Decoder<A>;
/**
 * @since 2.2.0
 */
export declare function partial<A>(properties: {
    [K in keyof A]: Decoder<A[K]>;
}): Decoder<Partial<A>>;
/**
 * @since 2.2.0
 */
export declare function record<A>(codomain: Decoder<A>): Decoder<Record<string, A>>;
/**
 * @since 2.2.0
 */
export declare function array<A>(items: Decoder<A>): Decoder<Array<A>>;
/**
 * @since 2.2.0
 */
export declare function tuple<A extends ReadonlyArray<unknown>>(...components: {
    [K in keyof A]: Decoder<A[K]>;
}): Decoder<A>;
/**
 * @since 2.2.0
 */
export declare function intersection<A, B>(left: Decoder<A>, right: Decoder<B>): Decoder<A & B>;
/**
 * @since 2.2.0
 */
export declare function lazy<A>(id: string, f: () => Decoder<A>): Decoder<A>;
/**
 * @since 2.2.0
 */
export declare function sum<T extends string>(tag: T): <A>(members: {
    [K in keyof A]: Decoder<A[K]>;
}) => Decoder<A[keyof A]>;
/**
 * @since 2.2.0
 */
export declare function union<A extends ReadonlyArray<unknown>>(...members: {
    [K in keyof A]: Decoder<A[K]>;
}): Decoder<A[number]>;
/**
 * @since 2.2.0
 */
export declare const map: <A, B>(f: (a: A) => B) => (fa: Decoder<A>) => Decoder<B>;
/**
 * @since 2.2.0
 */
export declare const alt: <A>(that: () => Decoder<A>) => (fa: Decoder<A>) => Decoder<A>;
/**
 * @since 2.2.0
 */
export declare const URI = "io-ts/Decoder";
/**
 * @since 2.2.0
 */
export declare type URI = typeof URI;
declare module 'fp-ts/es6/HKT' {
    interface URItoKind<A> {
        readonly [URI]: Decoder<A>;
    }
}
/**
 * @since 2.2.3
 */
export declare const functorDecoder: Functor1<URI>;
/**
 * @since 2.2.3
 */
export declare const altDecoder: Alt1<URI>;
/**
 * @since 2.2.3
 */
export declare const schemableDecoder: Schemable1<URI> & WithUnknownContainers1<URI> & WithUnion1<URI> & WithRefinement1<URI>;
