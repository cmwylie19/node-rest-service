"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const debug_1 = require("debug");
const Mitm = require("mitm");
const serialize_1 = require("../serialize");
const client_request_tracker_1 = require("./client-request-tracker");
const debugLog = debug_1.default("unmock:node-interceptor");
const respondFromSerializedResponse = (serializedResponse, res) => {
    res.writeHead(serializedResponse.statusCode, serializedResponse.headers);
    res.end(serializedResponse.body);
};
class NodeInterceptor {
    constructor(config) {
        this.config = config;
        this.initialize(config.shouldBypassHost);
    }
    disable() {
        if (this.mitm) {
            this.mitm.disable();
            this.mitm = undefined;
        }
        client_request_tracker_1.default.stop();
    }
    initialize(shouldBypass) {
        if (this.mitm !== undefined) {
            this.disable();
        }
        this.mitm = Mitm();
        this.mitm.on("connect", (socket, opts) => {
            if (shouldBypass(opts.host || "")) {
                socket.bypass();
            }
        });
        client_request_tracker_1.default.start();
        this.mitm.on("request", (req, res) => __awaiter(this, void 0, void 0, function* () {
            debugLog("Handling incoming message...");
            req.on("error", (e) => debugLog("Error on intercepted request:", e));
            req.on("abort", () => debugLog("Intercepted request aborted"));
            const clientRequest = client_request_tracker_1.default.pop(req);
            let serializedRequest;
            try {
                serializedRequest = yield serialize_1.serializeRequest(req);
            }
            catch (err) {
                debugLog(`Failed serializing request`);
                clientRequest.emit("error", err);
                return;
            }
            setImmediate(() => this.config.onSerializedRequest(serializedRequest, (serializedResponse) => respondFromSerializedResponse(serializedResponse, res), (err) => clientRequest.emit("error", err)));
        }));
    }
}
exports.default = NodeInterceptor;
//# sourceMappingURL=node-interceptor.js.map