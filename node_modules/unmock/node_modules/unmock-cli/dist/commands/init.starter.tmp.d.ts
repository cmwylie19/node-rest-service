declare const _default: "/**\n * Unmock Starter Template\n *\n * This is just to get you started, feel free to delete this.\n * Place your tests in this file.\n */\nconst unmock = require(\"unmock\");\n\n// Some dummy fetching function\nconst getUsersForUI = async () => {\n  try {\n    const { data } = await fetch(\"https://api.example.com/v1/users\");\n    return {\n      ...data,\n      users: data.users.map(user => ({ ...user, seen: false })),\n      newlyFetched: true,\n      timestamp: new Date().getTime()\n    };\n  } catch (e) {\n    return {\n      users: [],\n      error: e\n    }\n  }\n};\n\n// Basic unmock test\nconst { u } = unmock;\n\nsigns = ['Aries', 'Taurus', 'Gemini', 'Cancer', 'Leo', 'Virgo', 'Libra', 'Scorpio', 'Sagittarius', 'Capricorn', 'Aquarius', 'Pisces'];\n\nunmock\n  .default\n  .mock(\"https://api.example.com/v1\", \"example\")\n  .get(\"/users\")\n  .reply(200, {\n    users: u.array({ // an array of arbitrary length\n      id: u.integer(), // an arbitrary integer\n      name: u.string(\"name.firstName\"), // an arbitrary first name\n      zodiac: u.opt({ // an optional arbitrary zodiac\n        sign: u.stringEnum(signs), // an arbitrary zodiac sign\n        ascendant: u.opt(u.string()) // an optional arbitrary string\n      })\n    })\n  });\n\nbeforeAll(() => {\n  unmock.default.on();\n});\n\ntest(\"test get users for UI\", async () => {\n  const usersForUI = await getUsersForUI();\n  expect(typeof usersForUI.timestamp).toBe(\"number\");\n});\n";
export default _default;
//# sourceMappingURL=init.starter.tmp.d.ts.map