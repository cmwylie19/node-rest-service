"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = require("chalk");
const child_process_1 = require("child_process");
const fs_1 = require("fs");
const path = require("path");
const readline_sync_1 = require("readline-sync");
const logger_1 = require("../utils/logger");
const NodePkgInstaller_1 = require("../utils/NodePkgInstaller");
const init_starter_tmp_1 = require("./init.starter.tmp");
const CWD = process.cwd();
const logger = new logger_1.default();
exports.init = (dirname = "__tests__", options) => {
    const pkgJson = require(path.join(CWD, "package.json"));
    const projectName = (pkgJson && pkgJson.name) || "";
    const testSuiteDir = path.join(CWD, dirname);
    const unmockDir = path.normalize(`${testSuiteDir}${path.sep}__unmock__`);
    logger.log(`Creating test suite${(projectName &&
        " for " + chalk_1.default.magenta.bold(projectName)) ||
        ""}...`);
    try {
        fs_1.mkdirSync(testSuiteDir);
        fs_1.mkdirSync(unmockDir);
    }
    catch (error) {
        const deletePreviousTestsAnwser = readline_sync_1.question(`${chalk_1.default.yellow.bold("unmock")}: Do you wish to override existing tests?\n        (${chalk_1.default.yellow("Warning: this will result in the loss of previous tests")})\n        [Y/n]`);
        const deletePreviousTests = deletePreviousTestsAnwser === "Y" ? true : false;
        if (deletePreviousTests) {
            fs_1.rmdirSync(testSuiteDir);
        }
        else {
            logger.error(error);
            process.exit(0);
        }
    }
    logger.log("Installing dependencies...");
    const dependencies = ["unmock", "jest", "unmock-jest"];
    const useYarn = yarnExists() && options.installer !== "npm" ? true : false;
    const installer = new NodePkgInstaller_1.default({
        root: CWD,
        useYarn,
        usePnp: false,
        verbose: options.verbose,
        isOnline: !options.offline,
        isDev: true,
    });
    installer
        .install(dependencies)
        .then(() => {
        logger.log("Creating starter template...");
        fs_1.writeFileSync(path.join(CWD, dirname, "1.test.js"), init_starter_tmp_1.default);
        logger.log("Configuring the jest reporter...");
        setupJestReport(projectName, unmockDir);
        logger.log("Setup complete!");
        logger.log(`\n    Start writing tests in ${chalk_1.default.grey(`./${dirname}/`) +
            chalk_1.default.grey.bold("1.test.js")}\n    Enjoy testing APIs with unmock!\n`);
    })
        .catch(() => {
        logger.error("Unable to install dependencies.");
        process.exit(0);
    });
};
function setupJestReport(projectName = "unmock", outputDirectory = "/") {
    const jestConfigPath = path.join(CWD, "jest.config.js");
    if (!fileExistsSync(jestConfigPath)) {
        fs_1.writeFileSync(jestConfigPath, jestConfigTmp(projectName, outputDirectory));
    }
}
function jestConfigTmp(projectName, outputDirectory) {
    return `\
// jest.config.js
{
  reporters: [
    "default",
    [
      "unmock-jest",
      {
        outputDirectory: "${outputDirectory}",
        outputFilename: "${projectName}-report.html"
      }
    ]
  ];
}\n`;
}
function fileExistsSync(myPath) {
    let result = true;
    try {
        fs_1.accessSync(myPath, fs_1.constants.F_OK);
    }
    catch (e) {
        result = false;
    }
    return result;
}
function yarnExists() {
    try {
        child_process_1.execSync("yarnpkg --version", { stdio: "ignore" });
        return true;
    }
    catch (e) {
        return false;
    }
}
//# sourceMappingURL=init.js.map