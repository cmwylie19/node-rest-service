"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const glob = require("glob");
const path = require("path");
const logger_1 = require("../utils/logger");
const removeTrailingNumber = (s) => s
    .split(" ")
    .slice(0, -1)
    .join(" ");
const SNAP_SUFFIX = ".snap";
const DEFAULT_SNAPSHOTS_FOLDER = ".snapshots";
exports.listInternal = (logger) => {
    return new Promise((resolve, reject) => {
        logger.log("Fetching mocks and relevant tests...");
        glob(`${process.cwd()}/**/${DEFAULT_SNAPSHOTS_FOLDER}/**/*${SNAP_SUFFIX}`, { dot: true }, (e, matches) => {
            if (e) {
                reject(e);
                return;
            }
            matches.forEach(match => {
                logger.log(path.basename(match, SNAP_SUFFIX));
                const snapshots = JSON.parse(fs_1.readFileSync(match, "utf8"));
                const tests = Object.keys(snapshots).reduce((obj, name) => {
                    const key = removeTrailingNumber(name);
                    (obj[key] = obj[key] || []).push(name);
                    return obj;
                }, {});
                Object.keys(tests).forEach(test => {
                    logger.log(`  ${test}`);
                    tests[test].forEach(call => {
                        logger.log(`    hash: ${snapshots[call].hash}`);
                        logger.log(`      method: ${snapshots[call].method}`);
                        logger.log(`      host: ${snapshots[call].host}`);
                        logger.log(`      path: ${snapshots[call].path}`);
                    });
                });
            });
            resolve();
        });
    });
};
exports.list = () => __awaiter(void 0, void 0, void 0, function* () {
    yield exports.listInternal(new logger_1.default());
});
//# sourceMappingURL=list.js.map