"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = require("chalk");
const child_process_1 = require("child_process");
const logger_1 = require("../utils/logger");
const logger = new logger_1.default();
class NodePkgInstaller {
    constructor(options) {
        this.options = options;
    }
    install(dependencies) {
        return new Promise((resolve, reject) => {
            const { root, useYarn, usePnp, verbose, isOnline, isDev } = this.options;
            let command;
            let args;
            if (useYarn) {
                command = "yarnpkg";
                args = ["add", "--exact"];
                if (!isOnline) {
                    args.push("--offline");
                }
                if (usePnp) {
                    args.push("--enable-pnp");
                }
                if (isDev) {
                    args.push("-D");
                }
                args = args.concat(dependencies);
                args.push("--cwd");
                args.push(root);
                if (!isOnline) {
                    logger.log(chalk_1.default.yellow("You appear to be offline."));
                    logger.log(chalk_1.default.yellow("Falling back to the local Yarn cache.") + "\n");
                }
            }
            else {
                command = "npm";
                args = ["install", "--save", "--save-exact", "--loglevel", "error"];
                if (isDev) {
                    args.push("--save-dev");
                }
                args = args.concat(dependencies);
                if (usePnp) {
                    logger.log(chalk_1.default.yellow("NPM doesn't support PnP."));
                    logger.log(chalk_1.default.yellow("Falling back to the regular installs.") + "\n");
                }
            }
            if (verbose) {
                args.push("--verbose");
            }
            const child = child_process_1.spawn(command, args, { stdio: "inherit" });
            child.on("close", code => {
                if (code !== 0) {
                    reject({
                        command: `${command} ${args.join(" ")}`,
                    });
                    return;
                }
                resolve();
            });
        });
    }
}
exports.default = NodePkgInstaller;
//# sourceMappingURL=NodePkgInstaller.js.map