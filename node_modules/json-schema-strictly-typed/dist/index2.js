"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var t = __importStar(require("io-ts"));
exports.JSSTList = t.recursion("JSSTList", function () {
    return t.intersection([
        exports.JSSTProtoArray,
        t.intersection([
            t.type({
                items: exports.JSSTAnything
            }),
            t.partial({
                uniqueItems: t.boolean,
                minItems: t.number,
                maxItems: t.number
            })
        ])
    ]);
});
exports.JSSTAnything = t.recursion("JSSTAnything", function () {
    return t.union([
        exports.JSSTEmpty,
        exports.JSSTConst,
        exports.JSSTReference,
        exports.JSSTNull,
        exports.JSSTBoolean,
        exports.JSSTInteger,
        exports.JSSTNumber,
        exports.JSSTString,
        exports.JSSTArray,
        exports.JSSTObject,
        exports.JSSTOneOf,
        exports.JSSTAnyOf,
        exports.JSSTAllOf,
        exports.JSSTNot
    ]);
});
exports.JSSTTuple = t.recursion("JSSTTuple", function () {
    return t.intersection([
        exports.JSSTProtoArray,
        t.type({
            items: t.array(exports.JSSTAnything)
        })
    ]);
});
exports.JSSTObject = t.recursion("JSSTObject", function () {
    return t.intersection([
        t.type({
            type: t.literal("object")
        }),
        t.partial({
            required: t.array(t.string),
            dependencies: t.record(t.string, t.array(t.string)),
            additionalProperties: t.union([t.boolean, exports.JSSTAnything]),
            patternProperties: t.record(t.string, exports.JSSTAnything),
            properties: t.record(t.string, exports.JSSTAnything)
        })
    ]);
});
exports.JSSTOneOf = t.recursion("JSSTOneOf", function () {
    return t.type({
        oneOf: t.array(exports.JSSTAnything)
    });
});
exports.JSSTAnyOf = t.recursion("JSSTAnyOf", function () {
    return t.type({
        anyOf: t.array(exports.JSSTAnything)
    });
});
exports.JSSTAllOf = t.recursion("JSSTAllOf", function () {
    return t.type({
        allOf: t.array(exports.JSSTAnything)
    });
});
exports.JSSTNot = t.recursion("JSSTNot", function () {
    return t.type({
        not: exports.JSSTAnything
    });
});
exports.JSSTEmpty = t.type({});
exports.JSSTConst = t.type({
    const: t.union([
        t.number,
        t.number,
        t.string,
        t.boolean,
        t.null,
        t.array(t.string),
        t.type({})
    ])
});
exports.JSSTReference = t.type({
    $ref: t.string
});
exports.JSSTNull = t.type({
    type: t.literal("null")
});
exports.JSSTBoolean = t.type({
    type: t.literal("boolean")
});
exports.JSSTProtoInteger = t.type({
    type: t.literal("integer")
});
exports.JSSTSimpleInteger = t.intersection([
    exports.JSSTProtoInteger,
    t.partial({
        multipleOf: t.number
    })
]);
exports.JSSTIntegerWithMinimum = t.intersection([
    exports.JSSTSimpleInteger,
    t.intersection([
        t.type({
            minimum: t.number
        }),
        t.partial({
            exclusiveMinimum: t.boolean
        })
    ])
]);
exports.JSSTIntegerWithMaximum = t.intersection([
    exports.JSSTSimpleInteger,
    t.intersection([
        t.type({
            maximum: t.number
        }),
        t.partial({
            exclusiveMaximum: t.boolean
        })
    ])
]);
exports.JSSTIntegerWithBounds = t.intersection([
    exports.JSSTSimpleInteger,
    t.intersection([
        t.type({
            minimum: t.number,
            maximum: t.number
        }),
        t.partial({
            exclusiveMinimum: t.boolean,
            exclusiveMaximum: t.boolean
        })
    ])
]);
exports.JSSTIntegerWithNumericExclusiveMinimum = t.intersection([
    exports.JSSTSimpleInteger,
    t.type({
        exclusiveMinimum: t.number
    })
]);
exports.JSSTIntegerWithNumericExclusiveMinimumAndMaximum = t.intersection([
    exports.JSSTSimpleInteger,
    t.intersection([
        t.type({
            exclusiveMinimum: t.number,
            maximum: t.number
        }),
        t.partial({
            exclusiveMaximum: t.boolean
        })
    ])
]);
exports.JSSTIntegerWithNumericExclusiveMaximum = t.intersection([
    exports.JSSTSimpleInteger,
    t.type({
        exclusiveMaximum: t.number
    })
]);
exports.JSSTIntegerWithNumericExclusiveMaximumAndMinimum = t.intersection([
    exports.JSSTSimpleInteger,
    t.intersection([
        t.type({
            exclusiveMaximum: t.number,
            minimum: t.number
        }),
        t.partial({
            exclusiveMinimum: t.boolean
        })
    ])
]);
exports.JSSTIntegerWithNumericExclusiveBounds = t.intersection([
    exports.JSSTSimpleInteger,
    t.type({
        exclusiveMinimum: t.number,
        exclusiveMaximum: t.number
    })
]);
exports.JSSTIntegerEnum = t.intersection([
    exports.JSSTProtoInteger,
    t.type({
        enum: t.array(t.number)
    })
]);
exports.JSSTInteger = t.union([
    exports.JSSTSimpleInteger,
    exports.JSSTIntegerWithMinimum,
    exports.JSSTIntegerWithMaximum,
    exports.JSSTIntegerWithBounds,
    exports.JSSTIntegerWithNumericExclusiveMinimum,
    exports.JSSTIntegerWithNumericExclusiveMinimumAndMaximum,
    exports.JSSTIntegerWithNumericExclusiveMaximum,
    exports.JSSTIntegerWithNumericExclusiveMaximumAndMinimum,
    exports.JSSTIntegerWithNumericExclusiveBounds,
    exports.JSSTIntegerEnum
]);
exports.JSSTProtoNumber = t.type({
    type: t.literal("number")
});
exports.JSSTSimpleNumber = t.intersection([
    exports.JSSTProtoNumber,
    t.partial({
        minimum: t.number,
        maximum: t.number,
        multipleOf: t.number
    })
]);
exports.JSSTNumberEnum = t.intersection([
    exports.JSSTProtoNumber,
    t.type({
        enum: t.array(t.number)
    })
]);
exports.JSSTNumber = t.union([exports.JSSTSimpleNumber, exports.JSSTNumberEnum]);
exports.JSSTProtoString = t.type({
    type: t.literal("string")
});
exports.JSSTSimpleString = t.intersection([
    exports.JSSTProtoString,
    t.partial({
        faker: t.union([
            t.literal("address.zipCode"),
            t.literal("address.city"),
            t.literal("address.cityPrefix"),
            t.literal("address.citySuffix"),
            t.literal("address.streetName"),
            t.literal("address.streetAddress"),
            t.literal("address.streetSuffix"),
            t.literal("address.streetPrefix"),
            t.literal("address.secondaryAddress"),
            t.literal("address.county"),
            t.literal("address.country"),
            t.literal("address.countryCode"),
            t.literal("address.state"),
            t.literal("address.stateAbbr"),
            t.literal("address.latitude"),
            t.literal("address.longitude"),
            t.literal("commerce.color"),
            t.literal("commerce.department"),
            t.literal("commerce.productName"),
            t.literal("commerce.price"),
            t.literal("commerce.productAdjective"),
            t.literal("commerce.productMaterial"),
            t.literal("commerce.product"),
            t.literal("company.suffixes"),
            t.literal("company.companyName"),
            t.literal("company.companySuffix"),
            t.literal("company.catchPhrase"),
            t.literal("company.bs"),
            t.literal("company.catchPhraseAdjective"),
            t.literal("company.catchPhraseDescriptor"),
            t.literal("company.catchPhraseNoun"),
            t.literal("company.bsAdjective"),
            t.literal("company.bsBuzz"),
            t.literal("company.bsNoun"),
            t.literal("database.column"),
            t.literal("database.type"),
            t.literal("database.collation"),
            t.literal("database.engine"),
            t.literal("date.past"),
            t.literal("date.future"),
            t.literal("date.between"),
            t.literal("date.recent"),
            t.literal("date.soon"),
            t.literal("date.month"),
            t.literal("date.weekday"),
            t.literal("finance.account"),
            t.literal("finance.accountName"),
            t.literal("finance.mask"),
            t.literal("finance.amount"),
            t.literal("finance.transactionType"),
            t.literal("finance.currencyCode"),
            t.literal("finance.currencyName"),
            t.literal("finance.currencySymbol"),
            t.literal("finance.bitcoinAddress"),
            t.literal("finance.ethereumAddress"),
            t.literal("finance.iban"),
            t.literal("finance.bic"),
            t.literal("hacker.abbreviation"),
            t.literal("hacker.adjective"),
            t.literal("hacker.noun"),
            t.literal("hacker.verb"),
            t.literal("hacker.ingverb"),
            t.literal("hacker.phrase"),
            t.literal("helpers.randomize"),
            t.literal("helpers.slugify"),
            t.literal("helpers.replaceSymbolWithNumber"),
            t.literal("helpers.replaceSymbols"),
            t.literal("helpers.shuffle"),
            t.literal("helpers.mustache"),
            t.literal("helpers.createCard"),
            t.literal("helpers.contextualCard"),
            t.literal("helpers.userCard"),
            t.literal("helpers.createTransaction"),
            t.literal("image.image"),
            t.literal("image.avatar"),
            t.literal("image.imageUrl"),
            t.literal("image.abstract"),
            t.literal("image.animals"),
            t.literal("image.business"),
            t.literal("image.cats"),
            t.literal("image.city"),
            t.literal("image.food"),
            t.literal("image.nightlife"),
            t.literal("image.fashion"),
            t.literal("image.people"),
            t.literal("image.nature"),
            t.literal("image.sports"),
            t.literal("image.technics"),
            t.literal("image.transport"),
            t.literal("image.dataUri"),
            t.literal("internet.avatar"),
            t.literal("internet.email"),
            t.literal("internet.exampleEmail"),
            t.literal("internet.userName"),
            t.literal("internet.protocol"),
            t.literal("internet.url"),
            t.literal("internet.domainName"),
            t.literal("internet.domainSuffix"),
            t.literal("internet.domainWord"),
            t.literal("internet.ip"),
            t.literal("internet.ipv6"),
            t.literal("internet.userAgent"),
            t.literal("internet.color"),
            t.literal("internet.mac"),
            t.literal("internet.password"),
            t.literal("lorem.word"),
            t.literal("lorem.words"),
            t.literal("lorem.sentence"),
            t.literal("lorem.slug"),
            t.literal("lorem.sentences"),
            t.literal("lorem.paragraph"),
            t.literal("lorem.paragraphs"),
            t.literal("lorem.text"),
            t.literal("lorem.lines"),
            t.literal("name.firstName"),
            t.literal("name.lastName"),
            t.literal("name.findName"),
            t.literal("name.jobTitle"),
            t.literal("name.prefix"),
            t.literal("name.suffix"),
            t.literal("name.title"),
            t.literal("name.jobDescriptor"),
            t.literal("name.jobArea"),
            t.literal("name.jobType"),
            t.literal("phone.phoneNumber"),
            t.literal("phone.phoneNumberFormat"),
            t.literal("phone.phoneFormats"),
            t.literal("random.number"),
            t.literal("random.float"),
            t.literal("random.arrayElement"),
            t.literal("random.objectElement"),
            t.literal("random.uuid"),
            t.literal("random.boolean"),
            t.literal("random.word"),
            t.literal("random.words"),
            t.literal("random.image"),
            t.literal("random.locale"),
            t.literal("random.alphaNumeric"),
            t.literal("random.hexaDecimal"),
            t.literal("system.fileName"),
            t.literal("system.commonFileName"),
            t.literal("system.mimeType"),
            t.literal("system.commonFileType"),
            t.literal("system.commonFileExt"),
            t.literal("system.fileType"),
            t.literal("system.fileExt"),
            t.literal("system.directoryPath"),
            t.literal("system.filePath"),
            t.literal("system.semver")
        ])
    })
]);
exports.JSSTRegex = t.intersection([
    exports.JSSTProtoString,
    t.type({
        pattern: t.string
    })
]);
exports.JSSTStringEnum = t.intersection([
    exports.JSSTProtoString,
    t.type({
        enum: t.array(t.string)
    })
]);
exports.JSSTString = t.union([
    exports.JSSTSimpleString,
    exports.JSSTRegex,
    exports.JSSTStringEnum
]);
exports.JSSTProtoArray = t.type({
    type: t.literal("array")
});
exports.JSSTArray = t.union([exports.JSSTList, exports.JSSTTuple]);
exports.JSSTTopLevel = t.partial({
    $schema: t.string,
    $id: t.string,
    definitions: t.record(t.string, exports.JSSTAnything)
});
exports.JSSTEmptyTopLevel = t.intersection([exports.JSSTEmpty, exports.JSSTTopLevel]);
exports.JSSTConstTopLevel = t.intersection([exports.JSSTConst, exports.JSSTTopLevel]);
exports.JSSTReferenceTopLevel = t.intersection([
    exports.JSSTReference,
    exports.JSSTTopLevel
]);
exports.JSSTNullTopLevel = t.intersection([exports.JSSTNull, exports.JSSTTopLevel]);
exports.JSSTBooleanTopLevel = t.intersection([exports.JSSTBoolean, exports.JSSTTopLevel]);
exports.JSSTIntegerTopLevel = t.intersection([exports.JSSTInteger, exports.JSSTTopLevel]);
exports.JSSTSimpleIntegerTopLevel = t.intersection([
    exports.JSSTSimpleInteger,
    exports.JSSTTopLevel
]);
exports.JSSTIntegerWithMinimumTopLevel = t.intersection([
    exports.JSSTIntegerWithMinimum,
    exports.JSSTTopLevel
]);
exports.JSSTIntegerWithMaximumTopLevel = t.intersection([
    exports.JSSTIntegerWithMaximum,
    exports.JSSTTopLevel
]);
exports.JSSTIntegerWithBoundsTopLevel = t.intersection([
    exports.JSSTIntegerWithBounds,
    exports.JSSTTopLevel
]);
exports.JSSTIntegerWithNumericExclusiveMinimumTopLevel = t.intersection([
    exports.JSSTIntegerWithNumericExclusiveMinimum,
    exports.JSSTTopLevel
]);
exports.JSSTIntegerWithNumericExclusiveMinimumAndMaximumTopLevel = t.intersection([exports.JSSTIntegerWithNumericExclusiveMinimumAndMaximum, exports.JSSTTopLevel]);
exports.JSSTIntegerWithNumericExclusiveMaximumTopLevel = t.intersection([
    exports.JSSTIntegerWithNumericExclusiveMaximum,
    exports.JSSTTopLevel
]);
exports.JSSTIntegerWithNumericExclusiveMaximumAndMinimumTopLevel = t.intersection([exports.JSSTIntegerWithNumericExclusiveMaximumAndMinimum, exports.JSSTTopLevel]);
exports.JSSTIntegerWithNumericExclusiveBoundsTopLevel = t.intersection([
    exports.JSSTIntegerWithNumericExclusiveBounds,
    exports.JSSTTopLevel
]);
exports.JSSTIntegerEnumTopLevel = t.intersection([
    exports.JSSTIntegerEnum,
    exports.JSSTTopLevel
]);
exports.JSSTNumberTopLevel = t.intersection([exports.JSSTNumber, exports.JSSTTopLevel]);
exports.JSSTSimpleNumberTopLevel = t.intersection([
    exports.JSSTSimpleNumber,
    exports.JSSTTopLevel
]);
exports.JSSTNumberEnumTopLevel = t.intersection([
    exports.JSSTNumberEnum,
    exports.JSSTTopLevel
]);
exports.JSSTAnyOfTopLevel = t.intersection([exports.JSSTAnyOf, exports.JSSTTopLevel]);
exports.JSSTAllOfTopLevel = t.intersection([exports.JSSTAllOf, exports.JSSTTopLevel]);
exports.JSSTNotTopLevel = t.intersection([exports.JSSTNot, exports.JSSTTopLevel]);
exports.JSSTOneOfTopLevel = t.intersection([exports.JSSTOneOf, exports.JSSTTopLevel]);
exports.JSSTStringTopLevel = t.intersection([exports.JSSTString, exports.JSSTTopLevel]);
exports.JSSTSimpleStringTopLevel = t.intersection([
    exports.JSSTSimpleString,
    exports.JSSTTopLevel
]);
exports.JSSTRegexTopLevel = t.intersection([exports.JSSTRegex, exports.JSSTTopLevel]);
exports.JSSTStringEnumTopLevel = t.intersection([
    exports.JSSTStringEnum,
    exports.JSSTTopLevel
]);
exports.JSSTArrayTopLevel = t.intersection([exports.JSSTArray, exports.JSSTTopLevel]);
exports.JSSTListTopLevel = t.intersection([exports.JSSTList, exports.JSSTTopLevel]);
exports.JSSTTupleTopLevel = t.intersection([exports.JSSTTuple, exports.JSSTTopLevel]);
exports.JSSTObjectTopLevel = t.intersection([exports.JSSTObject, exports.JSSTTopLevel]);
exports.JSONSchemaObject = t.type({});
//# sourceMappingURL=index2.js.map