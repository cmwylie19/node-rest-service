import { ISerializedRequest } from "../interfaces";
import { IObjectToService, IServiceCore, OpenAPIObject } from "./interfaces";
import { IRequestResponsePair, ServiceSpy } from "./spy";
export declare class ServiceCore implements IServiceCore {
    static from(baseSchema: OpenAPIObject, { baseUrl, method, query, requestHeaders, responseHeaders, body, endpoint, statusCode, response, name, }: IObjectToService & {
        name: string;
    }): IServiceCore;
    readonly name: string;
    private hasPaths;
    private readonly oasSchema;
    private readonly callTracker;
    constructor(opts: {
        schema: OpenAPIObject;
        name: string;
    });
    transformer: (_: ISerializedRequest, o: OpenAPIObject) => OpenAPIObject;
    get schema(): OpenAPIObject;
    get hasDefinedPaths(): boolean;
    track(requestResponsePair: IRequestResponsePair): void;
    get spy(): ServiceSpy;
}
//# sourceMappingURL=serviceCore.d.ts.map