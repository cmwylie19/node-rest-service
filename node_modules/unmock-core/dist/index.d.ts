import * as sinon from "sinon";
import Backend, { buildRequestHandler } from "./backend";
import UnmockFaker from "./faker";
import { ILogger, IUnmockPackage } from "./interfaces";
import { NockAPI } from "./service/serviceStore";
import { AllowedHosts, IBooleanSetting } from "./settings";
import * as typeUtils from "./utils";
export * from "./interfaces";
export * from "./types";
export { sinon };
export { u } from "./nock";
export { transform, Addl, Arr } from "./generator-utils";
export { IInterceptorFactory, IInterceptorOptions } from "./interceptor";
export { IService } from "./service/interfaces";
export { Service } from "./service";
export { ServiceCore } from "./service/serviceCore";
export { Backend, buildRequestHandler };
export { typeUtils };
export { UnmockFaker };
export declare class UnmockPackage implements IUnmockPackage {
    allowedHosts: AllowedHosts;
    randomize: IBooleanSetting;
    readonly backend: Backend;
    readonly mock: NockAPI;
    readonly nock: NockAPI;
    private readonly opts;
    private logger;
    constructor(backend: Backend, options?: {
        logger?: ILogger;
    });
    faker(): UnmockFaker;
    on(): this;
    init(): this;
    initialize(): this;
    off(): void;
    get services(): Record<string, import("./types").UnmockService>;
    associate(url: string, name: string): void;
    reloadServices(): void;
    reset(): void;
}
//# sourceMappingURL=index.d.ts.map