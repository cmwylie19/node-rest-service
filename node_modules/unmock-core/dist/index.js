"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const sinon = require("sinon");
exports.sinon = sinon;
const backend_1 = require("./backend");
exports.Backend = backend_1.default;
exports.buildRequestHandler = backend_1.buildRequestHandler;
const faker_1 = require("./faker");
exports.UnmockFaker = faker_1.default;
const serviceStore_1 = require("./service/serviceStore");
const settings_1 = require("./settings");
const typeUtils = require("./utils");
exports.typeUtils = typeUtils;
__export(require("./interfaces"));
var nock_1 = require("./nock");
exports.u = nock_1.u;
var generator_utils_1 = require("./generator-utils");
exports.transform = generator_utils_1.transform;
exports.Addl = generator_utils_1.Addl;
exports.Arr = generator_utils_1.Arr;
var service_1 = require("./service");
exports.Service = service_1.Service;
var serviceCore_1 = require("./service/serviceCore");
exports.ServiceCore = serviceCore_1.ServiceCore;
class UnmockPackage {
    constructor(backend, options) {
        this.logger = { log: () => undefined };
        this.backend = backend;
        this.logger = (options && options.logger) || this.logger;
        this.allowedHosts = new settings_1.AllowedHosts();
        this.randomize = new settings_1.BooleanSetting(false);
        this.opts = {
            isWhitelisted: (url) => this.allowedHosts.isWhitelisted(url),
            log: (message) => this.logger.log(message),
            randomize: () => this.randomize.get(),
        };
        this.mock = serviceStore_1.addFromNock(this.backend.serviceStore);
        this.nock = serviceStore_1.addFromNock(this.backend.serviceStore);
    }
    faker() {
        return new faker_1.default({ serviceStore: new serviceStore_1.ServiceStore([]) });
    }
    on() {
        this.backend.initialize(this.opts);
        return this;
    }
    init() {
        return this.on();
    }
    initialize() {
        return this.on();
    }
    off() {
        this.backend.reset();
    }
    get services() {
        return this.backend.services;
    }
    associate(url, name) {
        this.backend.serviceStore.updateOrAdd({ baseUrl: url, name });
    }
    reloadServices() {
        this.backend.loadServices();
    }
    reset() {
        this.backend.serviceStore.resetServices();
    }
}
exports.UnmockPackage = UnmockPackage;
//# sourceMappingURL=index.js.map